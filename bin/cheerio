#!/usr/bin/env node
const cheerio = require('cheerio'),
			find = require('cheerio-eq'),
			url = require('url'),
			program = require('commander');

let html = '';

program
  .option('-o, --output [value]', 'output method {html, text, size}', function(
    val
  ) {
    if (val != 'html' && val != 'text' && val != 'size') return 'html';
    else return val;
  })
  .option('-a --attr [value]', 'attr select')
  .version(require('../package.json').version)
  .parse(process.argv);

program.output = program.output || 'html';

process.stdin.on('data', function(data) {
  html += data.toString();
});

process.stdin.on('end', function() {
  var $ = cheerio.load(html);

	let args = process.argv.slice(2)

	args = args.map(_ => ` ${_} `)

  const selectors = args.join(' '),
				tagger = {},
				data = [];

  for (let selector of selectors.split(',')) {
    const [key, value] = selector.split(':');

    tagger[key.trim()] = value.trim().replace(/ {1,}/g, ' ');
  }

	const each = tagger['each'];

	delete tagger['each'];

	$(each).each((i, el) => {
		const map = {}

		for (let key in tagger) {
			if (tagger[key].match(/\*/)) {
				const select = tagger[key].split('*')[0],
							attr = tagger[key].split('*')[1];

				if (attr === 'src')
					map[key] = url.resolve('http://', $(el).find(select).attr(attr));
				else
					map[key] = $(el).find(select).attr(attr);
			} else {
				map[key] = $(el).find(tagger[key]).text();
			}
		}

		data.push(map);
	})

	console.log(JSON.stringify(data))

});
